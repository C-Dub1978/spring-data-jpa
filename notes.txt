@NamedQuery - used to create NON native sql queries using JPQL
@NamedQueries - hash of multiple @NamedQuery (you cant add multiple @NamedQuery annotations to
a class, you must wrap in @NamedQueries({ value = {
    @NameQuery(........)
}}))

These will be added to the actual Entity class. They can be parameterized with named (:paramName) or
positional (1?)

Heres how to deal with parameters

1. set it (positional params)
Query query = em.createNativeQuery("SELECT * FROM COURSE WHERE id = ?", Course.class);
// The first parameter is positional, so if you had a more complex query with multiple params,
// you could just continue to set the parameters as many times as needed - I.E.

Query query = em.createNativeQuery(
    "SELECT * FROM COURSE WHERE id = ?1 AND name = ?2"
)
query.setParameter(1, 1001L).setParameter(2, "course name");
query.getResultList();

2. set it (named params)
Query query = em.createNativeQuery("SELECT * FROM COURSE WHERE id = :id AND name = :name);
query.setParameter("id", 1001L).setParameter("name", "Some Name to Query");

Keep in mind - there are only sometimes that you have to used native queries instead of JPQL - 
one of those instances is if you are doing a MASS update on a bunch of records. If you want to use JPA, you'd have to 1. get the row, update it. Get the next row, update it.....
this would take forever and would be highly inefficient

REMEMBER - IF YOU ARE USING NATIVE QUERIES, YOU ARE NOT MAKING USE OF PERSISTENCE CONTEXT SO BE AWARE,
YOU NEED TO MANUALLY REFRESH AND TRACK

=============================================

JPA relationships

`In our upcoming refactors, we will soon have the following entities:
Course
Student
SchoolGrade
CourseReview
Address

@ManyToMany
Course <---> Student (a course can have many students enrolled, and a student can be enrolled in many courses)

@OneToOne
Student <---> Address (a student can have ONE address, and an address can only be associated with 1 student)

@ManyToOne
Course <---> CourseReview
A Course can have multiple CourseReviews. However, a CourseReview, can only be associated with a single course.
(We are looking at this from the CourseReview perspective, its @ManyToOne - meaning that many CourseReviews can be associated with a single Course)
(If we look at it from the Course perspective, we can define it as @OneToMany, being that ONE single course can have many reviews)


@OneToOne details
****** IMPORTANT ********
ONE TO ONE RELATIONSHIPS BY DEFAULT ARE ALWAYS EAGERLY FETCHED - 
you can also convert this to LAZY fetching as well, tbd...

In our case (learning, not real world), a student can only have 1 address. We
cant associated a student with multiple addresses. So for the relationship, we can
say that:

Student <----> Address is a OneToOne relationship. To define this, lets think about
sql first - we can say that a Student object can have a field which has a foreign
key mapped to an Address instance (which is the primary key of the Address).
OR, the other way around, we can say an Address
instance can be mapped to a foreign key of a Student (with student primary key being
the foreign key)

So basically in a 1 to 1, you can declare inside the student class, a
@OneToOne
private Adress adress;

OR

you can declare inside the address class, a
@OneToOne
private Student student;

wherever you choose to define a @OneToOne, you can say that inside that entity,
its OWNS the relationship for a 1 to 1, it does NOT have to be a 2 way relation

Lazy vs Eager -
By deafult if you do not annotate an entity field which has a relationship,
with a fetch strategy, its gonna try to EAGER fetch.

so If we look at our Student (or Address class), simply add @OneToOne(fetch=FetchType.LAZY)
Keep in mind, doing it this way - when we search for a student for example, like
Student testStudent = em.find(Student.class, 10L);
// ERROR ON THE NEXT LINE
Address address = student.getAddress() # <------ Exception thrown
// To avoid this, make sure any method that is trying to retrieve a Student and then trying to get its
// Address in the same trasaction, make sure the method is marked with @Transactional

Lazy fetching ONLY gets relationship objects from one specific object type when you specifically
ASK for those relationship object

//////////// HUGE ISSUE - IF YOU ARE USING ENTITY MANAGER, AND ARE FUCKING WITH THINGS
INSIDE A METHOD - LETS SAY YOU HAVE A CHAIN OF DB CALLS -

public void entityWeirdness() {
    Student student = this.em.find(Student.class, 12L); // touching the database 1, em is tracking
    student.setFirsttName("Chris");
    student.setLasttName("Chelios");

    // WE ARE STILL WITHIN THE ENTITYMANAGER CONTEXT AND STUFF WILL PERSIST
    // UNLESS FOR SOME REASON SOMETHING FUCKING FAILS - IF WE DONT ANNOTATE THE ABOVE
    // METHOD WITH @TRANSACTIONAL, if the call to student.setLastName fails, youre going
    // to fuck your databse up.
}

BOOOOOM! If the above line getting the address fails, if we mark it with @Transactional,
then once the address 'get' line failse, we roll the whole transaction back and we dont
fuck the database

Moral of the story is mark the methods that are manipluation data with @Transactional

As soon as you define somthing with @Transactional, inside youre methods, you are
dealing with the exact moment that involves the persistence context

At the end of the day - if you are using entityManager -
if you call a method thats not annotated with @Transactional

public void entityWeirdness() {
    Object myObject = em.findSomethingById(1L);
    object.setSomeProperty("exception thrown"); <======= BOOOM we have not annotated with @Transactional
    // so the line above me will fail

}

====================================================

@OneToOne - bidirectional relationships
The way we have it, we have annotated our Student entity so far with a @OnetoOne on its
Address and StudentGrade fields. With JUST that annotation, we can get a student object,
then from it call student.getAddress() or student.getStudentGrade(). 

Shouldnt we be able to do the opposite? 

Yes! We should be able to retrieve an Address or StudentGrade entity from the db, and from either
call entity.getStudent()

As long as we annotate both the Address and StudentGrade entities with a @OneToOne with its Student
field, we can then get the Student entity from either of those. If we DONT annotate the Address
and Student entities, we will not be able to get the Student from either.
IMPORTANT!
If we just set this up as above, the student table will now have 2 new fields - address_id and
student_grade_id
Both the address and student_grade tables will also have a new field, student_id.
This is BAD, we are storing duplicate data in these fields, so in order to keep things clean
in the DB, we need to specify an "Owning" side of the @OneToOne

Pick which entity you want to be the owner (student -> address), (student -> studentGrade), or vice
versa. We will choose to have the student entity be the owner, so we must add the following to
the @OneToOne in both the Address and StudentGrade entities:
@OneToOne(fetch=FetchType.LAZY, mappedBy="student") <- student is the actual field name....

(remember, you add the mappedBy="" to the NON owning side, not the other way around)

==============================================

Q: When does hibernate send updates to the database?

A: Take the following transactional method:

@Transactional
public void changeStuff() {
    // Create 2 objects

    em.persist(obj1); < - The insert query gets fired
    em.persist(obj2); < - The insert query gets fired

    // Change obj1 < - The update query is fired
    // Change obj2 < - The update query is fired
}

Hibernate is efficient, and thus will stage all the changes inside a trasactional method, and
will wait until the last possible second to query the DB.

Lets say the update on line 178 fails...... At that point since this method is transactional,
Hibernate will rollback ALL changes (lines 174 and 175, 177, 178), because the entityManager is
keeping track of the current context...... So what would happen is:

174 -> insert obj1 query is cached
175 -> insert obj2 query is cached

177 -> update obj1 query is cached
178 -> update obj2 <<<<< SOMETHING FAILS

Since the entityManager knows we had a failure, it will rollback and will NOT fire any of the staged queries.
However, if line 192 does NOT fail, the entitymanager will then fire all of those queries at the end of
the method.

IF you wanted to push any/all of the staged queries before the end of the method hits, simply call
em.flush(); - in this case all queries will fire to the db. IF something fails after the em.flush(),
hibernate is smart enough to roll back ALL the changes, even if they were fired to the db. Hibernate
waits till the END of the transaction.......

Why do we need @Transactional in unit tests sometimes?
If you are making changes with a database in any way, and are NOT using a repository, you need to
annotate with this. If a method calls another method which interacts with the db, you need to annotate.
If you are using a repository within a unit test, you dont need to annotate your unit test method.
Basically anytime you are interacting directly with EntityManager instead of a repository, use the
annotation when you are changing data.

Read only ops:
take this for instance:

List<Comment> someReadOnlyMethod() {
    User user = em.find(User.class, 1L); <- succeeds
    List<Comments> comments = user.getComments(); < - FAILS
    return comments;
}

In this case, the first line will succeed. Lets assum that the comments for a user are Lazy loaded.
Since with the first line we are using EntityManager, that line itself becomes a single transaction -
that is to say that we will successfully pull that user from the db, but as soon as that line finishes
execution, the transaction automatically finished, and we are no longer within a Transaction.
The next line will fail, because we are NOT within a transaction, and hence do NOT have a connection to
the db. When we are dealing with read-only operations, as long as you are directly using the EntityManager
you do NOT need to annotate the method with @Transactional. If you try to hit the db without using em,
you will fail without the annotation.

@DirtiesContext inside test classes - when and why?
Lets say you have a test class that has methods that would change actual data in the db. We don't want
to do this! You are mutating your data from within a test environment. In each method where this could
happen, we want to leave the data as it was before you ran unit tests. Always use @DirtiesContext - it
will return all changes to their previous state.

=====================================================

Advanced relationships - @ManyToOne, @ManyToMany, etc

In our current state, heres an example of @ManyToOne (which is the same as @OneToMany) -

One single course can have many reviews. For the database design, we don't want to be storing foreign
keys and it would be awful practice to have a column in the Course table which has a list of
CourseReview id's...... In this case, we want to find the "One" side of the relationship, which in
this case is the Course entity, and use its id in the "Many" side. So in our case, we could simply
add a course_id field to the "Many" side, meaning add a course_id field to the CourseReview table.

So now that we have designed the relationship for the database and entities, we have to define
the mapping inside our entities. Inside the "One" entity class, add the relationship -

public Course {
    ......stuff

    @OneToMany // One course, can have many course reviews
    private List<Review> reviews = new ArrayList<>();

    ......more stuff
}

For the getters/setters - getter is normal.
For the setters, its a little different. You wouldnt want a class to be able to add an entire list -
potentially they could get the current list, make unwanted mutations, then set the entire list. This
is bad. In this case, instead of a traditional setter, break it down into individual add/removes

public void addReview(Review r) {
    this.reviews.add(r);
}
public void removeReview(Review r) {
    this.reviews.remove(r);
}

Now for the OTHER side of the @OneToMany

in our CourseReview class, we need a relationship to a single course

public Review {
    ...stuff

    private Course course;

    ...moreStuff
}

Since its just one course and not a list, normal getters/setters.
In this case, in our paragraph above where we designed the relationship in the database (that is to
say that we added a course_id to the CourseReview table, we can say that the "Owning" side of the relationship
is the CourseReview entity, and therefore we must add the mapping to the non-owning side - the Course
relationship which is @OneToMany(mappedBy="course"))
ALWAYS ADD THE MAPPING ANNOTATION TO THE NON-OWNER!!!!!!!!